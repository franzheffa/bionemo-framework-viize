# SPDX-FileCopyrightText: Copyright (c) 2024 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
# SPDX-License-Identifier: LicenseRef-Apache2
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


# this suite of tests should test the usage of the cell-type-bench script. we will manually invoke the functions within the script using pre-determined files.
#   logits from our model will be downloaded from s3 via the `load` call as well as the truncated h5ad file.

import tempfile
from pathlib import Path

import pandas as pd
import pytest
import torch

from bionemo.core.data.load import load
from bionemo.geneformer.api import GeneformerConfig
from bionemo.geneformer.scripts.celltype_classification_bench.bench import load_data_run_benchmark
from bionemo.geneformer.scripts.celltype_classification_bench.download import download
from bionemo.geneformer.scripts.infer_geneformer import infer_model
from bionemo.testing.utils import (
    assert_matrix_correlation_above_value,
    assert_matrix_mape_below_value,
)


def test_load_data_run_benchmark():
    # Loads embeddings, h5ad file, scdl files, and CV results.
    contents_dir = load("single_cell/celltype-bench-golden-vals") / "hs-celltype-bench-subset7500"

    # contents_dir = h5ad_file / "hs-celltype-bench-subset7500"
    h5ad_file = contents_dir / "hs-celltype-bench-subset7500.h5ad"
    result_path = contents_dir / "inference_results10m_subset"
    # be sure to load 'results.csv' FIRST before running because this will overwrite it.
    golden_result_path = result_path / "results.csv"
    golden_result_df = pd.read_csv(golden_result_path, header=0)
    golden_result_df = golden_result_df.drop(columns=["f1_score_std"])

    result_df = load_data_run_benchmark(result_path, h5ad_file, write_results=False)
    result_df = result_df.drop(columns=["f1_score_std"])

    pd.testing.assert_frame_equal(
        result_df,
        golden_result_df,
        check_exact=False,
        rtol=1e-3,  # Relative tolerance of 0.1%
        atol=5e-3,  # Absolute tolerance of 0.005, this may be too high.
    )


def test_celltype_embeddings_golden_values():
    # This test is used to ensure that the embeddings generated by the celltype bench script are the same as the golden values.
    #    When there is a discrepency in results, it can be either from drift during inference or in the zero-shot model.

    # Manually invoke infer.
    contents_dir = load("single_cell/celltype-bench-golden-vals") / "hs-celltype-bench-subset7500"
    data_dir = contents_dir / "processed_input"
    # Golden values were generated with this checkpoint.
    checkpoint_path = load("geneformer/10M_240530:2.0")
    golden_values_path = contents_dir / "inference_results10m_subset"  # predictions__rank_0.pt
    results_path = contents_dir / "inference_results10m_subset_new"

    infer_model(
        data_path=data_dir,
        checkpoint_path=checkpoint_path,
        results_path=results_path,
        include_hiddens=False,
        micro_batch_size=4,
        include_embeddings=True,
        include_logits=False,
        include_input_ids=False,
        seq_length=2048,  # Known from checkpoint
        precision="bf16-mixed",
        devices=1,
        num_nodes=1,
        num_dataset_workers=0,
        config_class=GeneformerConfig,
        include_unrecognized_vocab_in_dataset=False,
    )

    result = torch.load(results_path / "predictions__rank_0.pt")["embeddings"]
    expected_vals = torch.load(golden_values_path / "predictions__rank_0.pt")["embeddings"]

    assert_matrix_mape_below_value(
        result,
        expected_vals,
        eps=0.1,
        max_mape=2.5,  # 2.5% average difference in final values with a magnitude over 0.1
    )
    assert_matrix_correlation_above_value(
        result,
        expected_vals,
        mask=expected_vals,
        min_correlation=0.9999,
    )


@pytest.mark.integration
def test_download_integration():
    """Integration test for the download function.

    This test simply calls the download function with a temporary directory
    and verifies that the output file was created.
    """

    # Create a temporary directory
    with tempfile.TemporaryDirectory() as temp_dir:
        temp_path = Path(temp_dir)

        # Call the download function with default parameters except base_dir
        download(census_version="2023-12-15", dataset_id="8e47ed12-c658-4252-b126-381df8d52a3d", base_dir=temp_path)

        # Check that the output file was created
        expected_file = temp_path / "hs-celltype-bench.h5ad"
        assert expected_file.exists(), f"Expected output file {expected_file} not found"

        # Basic file size check to ensure it's not empty
        file_size = expected_file.stat().st_size
        assert file_size > 0, f"Output file exists but is empty ({file_size} bytes)"
